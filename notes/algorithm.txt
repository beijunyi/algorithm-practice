1) When aiming O(1) time complexity. Try using hashmap. Maybe use it to pair up elements? #325
2) When dealing with graph or matrix question, think DFS and BFS.
3) DFS is easier to implement. BFS is better when aiming to minimise the returned value. #317
4) BST left child must be smaller than or equal to parent.
5) BST smallest element on the right must be greater than the biggest element on the left.
6) BST problems may need MIN, MAX values passed from descendants. #333
7) Check whether all bits are clear, use "bits == 0" or "bits != 0". #320
8) When there is an obvious recursive solution to a problem. Solve it with recursion first. Then maybe we can opt it.
9) Max resource sharing problem: count acquire act as +1 and release act as -1 and then sort their timestamps. #253
10) When incrementing variables inside a FOR loop, watch out for the default increment logic of the FOR loop. #186
11) Find cycle, Find island problems may be solved by "Find Union" with O(n) time where n is the number of edges. #261


Appendix:
DS: ArrayLists, Hash Maps, Trees (+ Tries), Graphs, Stacks + Queues, Heaps
Algo: Merge Sort, Quick Sort, BFS, DFS, Binary Search
Concepts: Big O time, Big O Space, Recursion, Dynamic Programming

Big O for recursive: draw a call stack/tree